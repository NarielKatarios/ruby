!!!!!!!!!!!!!!!терминал
narielkatarios@NarielKatarios-Lenovo-V110-15ISK:~$
ls - показывает все папки
mkdir ruby - возвращает выше в папку?
fish - программа для помощи
./RubyMine/bin/rubymine.sh  - запуск рубимайн из терминала
sudo apt-get update - после установки линукса - обновление
sudo apt get mc - слетела руби, не работает ирб
️~ - тильда означает дрмашнюю папку
cd = change directory - войти в папку из домашней папки
-----------------------------------------------
установи bundler mc fish
sudo apt-get install bundler mc fish
 ---------------------------------------------
 github.com

ЧТОБЫ ЗАПУШИТЬ ЗАДАНИЯ В ГИТХАБ!
выполни в терминале в своей папке
cd ruby
git add .
    git commit -m 'задание 6'
git push
(или git push origin master если не получится)
ПЕРВОЕ ПОЛУЧИЛОСЬ
-------------------------------------------------
как файл в терминале открыть
прям из корневой папки
ruby ruby/04/main.rb
или
cd ruby
ruby 04/main.rb
командная строка предназначена для работы с файлами
а интерпретатор руби - только с командами и аргументами
тоесть
load - это команда
а имя файла в кавычках - это аргумент строка
если написать без кавычек - то интерпретатор подумает что это команда или переменнная
---------------------------------------------------------------
!!!!!!!!!!!!!!!!БРАУЗЕР!
http://rextester.com/l/ruby - руби в онлайне
rubular.com - справочник шаблонов- регулярных выражений

--------------------------------------------------------






!!!!!!!!!!!!!!!Рубимайн
shift+f6+fn- переименовать файл
edit undo - отмена последнего действия
control+r- замена текста
------------------------------------------------
МЕТОД PUTS - вывести на экран строку
puts - просто выводит на экран всё, что следует за ним
puts     5 * (12-8) + -15
возврат -29802
puts 'Привет, мир!'
возврат Привет, мир!
puts 'Я люблю ' + 'яблочный пирог.'
возврат Я люблю яблочный пирог.
puts 'миг ' * 4
возврат миг миг миг миг
----------------------------------------------
МЕТОД GETS - получить строку
МЕТОД CHOMP - убирает все энтеры в конце строки
name = gets.chomp
------------------------------------------
МЕТОД REVERSE - выдаёт значение строки, перевёрнутое задом наперёд:
var1 = 'барк'
puts var1.reverse
краб
-----------------------------
МЕТОД LENGTH
name.length.to_s - '22'
-------------------------------------
МЕТОД UPCASE изменяет каждую строчную букву на заглавную
метод DOWNCASE изменяет каждую заглавную букву на строчную.
МЕТОД SWAPCASE переключает регистр каждой буквы в строке
МЕТОД CAPITALIZE как downcase, только он переводит первую букву в заглавную (если
это буква).
letters = 'aAbBcCdDeE'
puts letters.capitalize
Aabbccddee
МЕТОД CENTER добавляет пробелы в начале и конце, чтобы центрировать строку
lineWidth = 50
puts( 'Так никто не визжал,'.center(lineWidth))
           так никто не визжал,
                        ljust и rjust, названия которых
МЕТОДЫ LJUST и RJUST (выровнять влево) и (выровнять вправо)
5**2 - 5 в степени 2 - 25
5**0,5 - квадратный корень из 5 - 2.23606797749979
5%2 - выводит остаток после деления - 1
(5-2).abs и ((2-5).abs) - абсолютное значение - 3
МЕТОД RAND - рандомное дробное число от 0 до 1
rand(5) - рандомное целое от 0 до 5 (5 не входит)
МЕТОД SRAND зерно случайной последовательности, чтобы повторить такие же рандомные числа
МЕТОДЫ СРАВНЕНИЯ
puts 5 >= 5 - true
1 > 2 - false
= - присваивание - переменная равна
== - эти два объекта равны??
!= - эти два объекта не равны??
puts 'cat' < 'dog' - тру - по алфавиту (прописная имеет значение)











---------------------
  2.to_s #возвращает строковую версию объекта '2'
'2'.to_i #возвращает целочисленную версию значения объекта 2
  2.to_f #возвращает плавающую версию 2.0
--------------------------
МЕТОД ВЕТВЛЕНИЯ IF ELSE и END
 МЕТОД ЦИКЛОВ WHILE
 control+c - выход из бесконечного цикла
 МЕТОД ЛОГИЧЕСКИХ ОПЕРАЦИЙ OR AND NOT
 ----------------------------
 МОДУЛЬ MATH
(Math::PI) # - число Пи - 3.14159265358979
((1 + Math.sqrt(5))/2) - 1.61803398874989
-------------------------------------------
МАССИВЫ m = [1, 2, 3, 4]
m[0] - 1 - первый объект в массиве
МЕТОД EACH - делать что-то с каждым объектом массива
это метод массива - итератор (метод как цикл) всегда с do end
 m.each do |index| puts index
 end
 МЕТОД TIMES - итератор целого числа
 3.times do
   puts 'hello'
 end
 3.times do |i| puts i end
 3.times {|i| puts i}
МЕТОД JOIN - разделяет строковые объекты массива чем-нибудь
 m.to_s - 1234
 m.join('! ') - 1! 2! 3! 4
МЕТОД LAST  - показывает последний объект массива
 m.last - 4 - последний
 МЕТОД LENGTH - длина массива
 m.length - 4  - количество
 МЕТОД POP  - удаляет последний и показывает его
 m.pop - 4 - удаляет последний, показывает, какой
 МЕТОД SORT - сортирует объекты массива






------------------------------------------------------------
БЛОКИ
 3.times {|i| puts i}
0
 1
 2
def m(i)
  puts i
end

 for i in 1..3
   m(i)
 end
 1
 2
 3

 h = {a: 1, b: 2, c: 3}
 h.each do |value|
   puts value.inspect
 end
a
 b
[:c=>3]
 h.each do |key, value|
puts "#{key} => #{value}"
a
b
c => 3
[1,2,3,4].each { |i| puts i * 10}
10
20
30
40

line_num = 0
file.open('blocks.rb').each do |line|
  puts "#{line_num += 1}: #{line}"
end
1: - все строки файла
2:

сохранить блок в переменную - создание объекта класса Прок
a = Proc.new {|x| x = x * 10; puts x}
b = proc {|x| x = x * 10; puts x}
c = lambda {|x| x = x * 10; puts x} лямда контроллирует количество аргументов
вызов блока
a.call(100)
1000

x = "hello"
block = Proc.new {puts x}
block.call
hello
def m(block)
  x = "goodbye"
  puts "X from method: #{x}"
  block.call
end
m(block)
X from method: goodbye
hello

вызвать переданный блок МЕТОД YIELD
def m
  puts "Before block"
yield
  puts "After block"
end
m {puts "Inside block"}
Before block
Inside block
After block

ДАННЫЕ В БЛОК - неименованый
def caps(str)
  str.capitalize! #!изменяется строка с заглавной буквы
  yield(str)
end
caps('abc')  {|str| puts str[0]}
A
caps('abc')  {|str| puts str}
Abc

ПЕРЕДАЧА БЛОКА КАК ИМЕНОВАНОГО АРГУМЕНТА
def caps(str, block)
  str.capitalize!
  block.call(str)
end
block = lambda {|x| puts x}
caps 'abc', block
Abc

ЕЩЕ ОДИН СПОСОБ ЗАДАНИЯ АРГУМЕНТА БЛОКА КАК АРГУМЕНТА МЕТОДА
def caps(str, &block) - #последний аргумент c & должен быть передан в блок
str.capitalize!
block.call(str)
end
caps('abc') {|x| puts x}
Abc

def caps(str, &block)
str.capitalize!
block.call(str).
                   yield(str)
end
caps('abc') {|x| puts x}
Abc
Abc

ПЕРЕДАН БЛОК ИЛИ НЕТ
def m(str, &block)
if block_given?
  yield(str)
else
  puts str
  end
m('abc')

m('abc') {|x| x; capitalize!; puts x}

Abc





-------------------------------------------------------------
ВОПРОСЫ!!!!!!!!!!!!!
про неработающий мик: надо гуглить именно эту модель ноутбука


